// <auto-generated />
using System;
using GaragesStructure.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GaragesStructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240901181023_double_relation")]
    partial class doublerelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEndStructuer.Entities.Categories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categoriess");

                    b.HasData(
                        new
                        {
                            Id = new Guid("395849e7-033a-4ca0-8f7c-fc03d0eecdaa"),
                            CreationDate = new DateTime(2024, 9, 1, 18, 10, 23, 626, DateTimeKind.Utc).AddTicks(4150),
                            Deleted = false,
                            Icon = "Attachments/364800c2-c094-46cb-add5-7dc3f416403d.png",
                            Name = "Facebook"
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.FinancialMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FinancialMovements");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AcceptedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FinancialMovementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("orderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedUserId");

                    b.HasIndex("FinancialMovementId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Maximum")
                        .HasColumnType("text");

                    b.Property<string>("Minimum")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<decimal?>("ServicePrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c1d12a3-afde-4dd2-acfe-94d177d62e8a"),
                            CreationDate = new DateTime(2024, 9, 1, 18, 10, 23, 626, DateTimeKind.Utc).AddTicks(4220),
                            Deleted = false,
                            Description = "add followers",
                            Icon = "Attachments/364800c2-c094-46cb-add5-7dc3f416403d.png",
                            Maximum = "100000",
                            Minimum = "50",
                            Name = "add  followers",
                            ServiceId = "982",
                            SubCategoryId = new Guid("395849e7-033a-4ca0-8f7c-fc03d0eeadaa")
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("SubCategorys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("395849e7-033a-4ca0-8f7c-fc03d0eeadaa"),
                            CategoriesId = new Guid("395849e7-033a-4ca0-8f7c-fc03d0eecdaa"),
                            CreationDate = new DateTime(2024, 9, 1, 18, 10, 23, 626, DateTimeKind.Utc).AddTicks(4190),
                            Deleted = false,
                            Icon = "Attachments/364800c2-c094-46cb-add5-7dc3f416403d.png",
                            Name = "Facebook"
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Account")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("395849e7-033a-4ca0-8f7c-fc03d0eeedaa"),
                            Account = 0,
                            Balance = 0m,
                            CreationDate = new DateTime(2024, 9, 1, 18, 10, 23, 495, DateTimeKind.Utc).AddTicks(1230),
                            Deleted = false,
                            Email = "bbbeat114@gmail.com",
                            FullName = "ali",
                            IsActive = true,
                            Password = "$2a$10$DzjGZrmkEzxPvuqDMNXNQeONeYV0ZixIdITH7HntILB8E5sLL0gde",
                            RoleId = new Guid("395849e7-033a-4ca0-8f7c-fc03d0943daa"),
                            Username = "ali"
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.Audit<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GaragesStructure.Entities.LoginLogger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLoggers");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("NotificationDestination")
                        .HasColumnType("integer");

                    b.Property<int?>("NotifyFor")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotifyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GaragesStructure.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("395849e7-033a-4ca0-8f7c-fc03d0943daa"),
                            CreationDate = new DateTime(2024, 9, 1, 18, 10, 23, 495, DateTimeKind.Utc).AddTicks(1180),
                            Deleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("395849e7-033a-4ca0-8f7c-fc03d0943dab"),
                            CreationDate = new DateTime(2024, 9, 1, 18, 10, 23, 495, DateTimeKind.Utc).AddTicks(1200),
                            Deleted = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Doctor", b =>
                {
                    b.HasBaseType("GaragesStructure.Entities.Person");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("GaragesStructure.Entities.Patient", b =>
                {
                    b.HasBaseType("GaragesStructure.Entities.Person");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("BackEndStructuer.Entities.FinancialMovement", b =>
                {
                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany("FinancialMovements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Order", b =>
                {
                    b.HasOne("GaragesStructure.Entities.AppUser", "AcceptedUser")
                        .WithMany("AcceptedOrders")
                        .HasForeignKey("AcceptedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndStructuer.Entities.FinancialMovement", "FinancialMovement")
                        .WithMany()
                        .HasForeignKey("FinancialMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndStructuer.Entities.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedUser");

                    b.Navigation("FinancialMovement");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Service", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.SubCategory", "SubCategory")
                        .WithMany("Services")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.SubCategory", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.Categories", "Categories")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("GaragesStructure.Entities.AppUser", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Country", null)
                        .WithMany("Users")
                        .HasForeignKey("CountryId");

                    b.HasOne("GaragesStructure.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GaragesStructure.Entities.LoginLogger", b =>
                {
                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaragesStructure.Entities.RolePermission", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaragesStructure.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Doctor", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("GaragesStructure.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GaragesStructure.Entities.Patient", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("GaragesStructure.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Categories", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Service", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.SubCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("GaragesStructure.Entities.AppUser", b =>
                {
                    b.Navigation("AcceptedOrders");

                    b.Navigation("FinancialMovements");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
